一、跨域:
  浏览器对于javascript的同源策略的限制,例如a.cn下面的js不能调用b.cn中的js,对象或数据(因为a.cn和b.cn是不同域),所以跨域就出现了.

二、同源策略：
  请求的url地址,必须与浏览器上的url地址处于同域上,也就是域名,端口,协议相同.

三、解决跨域的请求的方式
  1、方式一：图片ping或script标签跨域
    图片ping常用于跟踪用户点击页面或动态广告曝光次数。 
    script标签可以得到从其他来源数据，这也是JSONP依赖的根据。 
    缺点：只能发送Get请求 ，无法访问服务器的响应文本（单向请求）

  2、JSONP跨域
​     JSONP（JSON with Padding）是数据格式JSON的一种“使用模式”，可以让网页从别的网域要数据。根据 XmlHttpRequest 对象受到同源策略的
影响，而利用 <script>元素的这个开放策略，网页可以得到从其他来源动态产生的JSON数据，而这种使用模式就是所谓的 JSONP。用JSONP抓到的数据
并不是JSON，而是任意的JavaScript，用 JavaScript解释器运行而不是用JSON解析器解析。所有，通过Chrome查看所有JSONP发送的Get请求都是js类
型，而非XHR。 
    缺点：
    只能使用Get请求
    不能注册success、error等事件监听函数，不能很容易的确定JSONP请求是否失败
    JSONP是从其他域中加载代码执行，容易受到跨站请求伪造的攻击，其安全性无法确保
  
  3、cors跨域
    Cross-Origin Resource Sharing（CORS）跨域资源共享是一份浏览器技术的规范，提供了 Web 服务从不同域传来沙盒脚本的方法，以避开浏览器的同源策略，确保安全的跨域数据传输。现代浏览器使用CORS在API容器如XMLHttpRequest来减少HTTP请求的风险来源。与 JSONP 不同，CORS 除了 GET 要求方法以外也支持其他的 HTTP 要求。服务器一般需要增加如下响应头的一种或几种：
      当然跨域请求默认不会携带Cookie信息

  4、window.name + iframe.
    ​window.name通过在iframe（一般动态创建i）中加载跨域HTML文件来起作用。然后，HTML文件将传递给请求者的字符串内容赋值给window.name。
然后，请求者可以检索window.name值作为响应。
    iframe标签的跨域能力；
      window.name属性值在文档刷新后依旧存在的能力（且最大允许2M左右）。
每个iframe都有包裹它的window，而这个window是top window的子窗口。contentWindow属性返回<iframe>元素的Window对象。你可以使用这个Window对象来访问iframe的文档及其内部DOM。

  5、window.postMessage()(不常用)
    window.postMessage(message,targetOrigin) 方法是html5新引进的特性，可以使用它来向其它的window对象发送消息，无论这个window对象是
属于同源或不同源(可实现跨域)，目前IE8+、FireFox、Chrome、Opera等浏览器都已经支持window.postMessage方法。
    message：为要发送的消息，类型只能为字符串；
    targetOrigin：用来限定接收消息的那个window对象所在的域，如果不想限定域，可以使用通配符 “*”。
    优点：使用postMessage来跨域传送数据还是比较直观和方便的；
    缺点： IE6、IE7不支持，所以用不用还得根据实际需要来决定。

  6、通过document.domain+iframe来跨子域(必须主域相同)
    这两个域名必须属于同一个基础域名!而且所用的协议，端口都要一致，否则无法利用document.domain进行跨域，所以只能跨子域

  7.WebSocket
    WebSocket protocol 是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，同时允许跨域通讯，是server push技术的一种很棒的实现。相关文章，请查看：WebSocket、WebSocket-SockJS

  8、代理
    同源策略是针对浏览器端进行的限制，可以通过服务器端来解决该问题
    DomainA客户端（浏览器） ==> DomainA服务器 ==> DomainB服务器 ==> DomainA客户端（浏览器）